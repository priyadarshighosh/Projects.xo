{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"toc_visible":true,"gpuType":"V28","authorship_tag":"ABX9TyMgaae3ZYihrCE4geU6PhED"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","source":["# Digit Classification using MNIST dataset"],"metadata":{"id":"xkJohNFKJHrK"}},{"cell_type":"markdown","source":["This previous onne was a Binary  classification\n","This is one is a  Multivarite Classification of different digits from different digits of the MNIST dataset"],"metadata":{"id":"Yv6gh3xQJkrQ"}},{"cell_type":"markdown","source":["For Data Science"],"metadata":{"id":"OKeqU5YzLQlv"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"uw5PPnq7KTJ1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["For Machine Learning"],"metadata":{"id":"U0vc7QPULTyg"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split               #for splitting the data into test and training data\n","from sklearn.compose import ColumnTransformer                       #for transforming the columns\n","from sklearn.impute import SimpleImputer                             #for imputing the missing values\n","from sklearn.preprocessing import OneHotEncoder                      #one hot encoding\n","from sklearn.preprocessing import MinMaxScaler                        #standard scaling\n","from sklearn.pipeline import Pipeline,make_pipeline                    #here we wont use pipelines\n","from sklearn.feature_selection import SelectKBest,chi2                 #feature selection                     #standard scaling\n","from sklearn.tree import DecisionTreeClassifier"],"metadata":{"id":"SnPxNDsAw903"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["For Deep learning"],"metadata":{"id":"fFEhi6x1LZs1"}},{"cell_type":"code","source":["import tensorflow as tf                                                   #deep learning library\n","from tensorflow import keras                                              # keras integrated with tf\n","\n","from tensorflow.keras import Sequential                                   #sequential model - arranging the Keras layers in a sequential order\n","\n","from tensorflow.keras.layers import Dense, Flatten                        # used to process information and simplify arrays in convolutional neural networks"],"metadata":{"id":"7DKVEHMQLszH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Getting the Data from the Mnist dataset"],"metadata":{"id":"gDy2H4StMUe3"}},{"cell_type":"markdown","source":["# Separating the Data   INTO Training and Testing DATASET"],"metadata":{"id":"2BHzJRJpMbOS"}},{"cell_type":"code","source":["(X_train,y_train),(X_test,y_test) = keras.datasets.mnist.load_data()"],"metadata":{"id":"hLEn9lSYMvzc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"id":"-dVQDRZJNOIQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train[0]                             #28 rows and 28 columns"],"metadata":{"id":"OfhZVHxhNSsy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test.shape"],"metadata":{"id":"IylRKlmlNmyM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test[0]"],"metadata":{"id":"tmd1vJMONq4e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train"],"metadata":{"id":"LtSd_f1-N4Cg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# IMAGES OF THE  DATASET"],"metadata":{"id":"pOHOIGGM1hcs"}},{"cell_type":"markdown","source":["We can also convert this to image using MATPLOTLIB"],"metadata":{"id":"jUb6O0IBN8OE"}},{"cell_type":"code","source":["plt.imshow(X_train[0])"],"metadata":{"id":"jBmTw2QtODV_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.imshow(X_train[88])                     #88th image"],"metadata":{"id":"0XKHkDWOORyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.imshow(X_test[14])                                            #14th testing image"],"metadata":{"id":"eBQIb_a7OR2z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" Most of the screens use 24 bits RGB pixels, each pixel has three components in order of Red, Green, Blue leaving 8 bits for each color component. Check this RGB calculator here. The minimum and maximum decimal number that can be represented through 8 bits is 0 and 255"],"metadata":{"id":"m0iuaFbbPM0F"}},{"cell_type":"markdown","source":["0 to 255 as 8^3 = 256"],"metadata":{"id":"FR6ahTbXPZ8Q"}},{"cell_type":"markdown","source":["for each pixel it goes from 0 to 255 , there are like 28x28 = 784 pixels"],"metadata":{"id":"Ac1odCkTPkqi"}},{"cell_type":"markdown","source":["What we want to do is ... NORMALIZE THIS VALUE FROM 0 TO 1 instead of 0 to 255 as it will help in the converge easily , FAST and more legible"],"metadata":{"id":"-MTLhpf5P817"}},{"cell_type":"code","source":["X_train = X_train/255\n","X_test = X_test/255"],"metadata":{"id":"93kdA39cQPSp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train[0]                   # see its between 0 to 1 now"],"metadata":{"id":"RxVQwcBYQY2T"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# BUILDING THE ANN FOR DIGIT CLASSIFICATION"],"metadata":{"id":"S59-PgPVQswW"}},{"cell_type":"code","source":["model = Sequential()   #Keras sequential model we will slowly add nodes and layers to  this"],"metadata":{"id":"EBgIBfL4LkbG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.add(Flatten(input_shape = (28,28)))  #28x28 is the image size of the input\n","                                           #its a 2d Array so vakues are in 2d we convert it into 1d in a array"],"metadata":{"id":"x0HMBiiTNhCO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["we dont need to specify the input here as it will flatten and give to the layers"],"metadata":{"id":"rFJxoiITOGOl"}},{"cell_type":"code","source":["model.add(Dense(128,activation='relu'))         #relu works best for these things\n","model.add(Dense(32,activation='relu'))\n","model.add(Dense(10, activation = 'softmax'))    #10 nodes for 10 classes of the multivariate classification\n","                                                #we use softmax when there is a multi variate classification"],"metadata":{"id":"Rj_OpPugN3Rt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"qOK7y5GAcp3b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics = ['accuracy'])    #we dont have to one hot encode our labels\n","                                                         #in categorical crossentrophy we have to one hot encode"],"metadata":{"id":"ZmJuKizVdEun"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Fitting the Model"],"metadata":{"id":"5n9fHXFw1A_0"}},{"cell_type":"code","source":[" history = model.fit(X_train,y_train,epochs=25,validation_split=0.2)"],"metadata":{"id":"Jj8cRbXvd6_q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.predict(X_test)               #This gives the probablity for each image to be any number between 0 to 9"],"metadata":{"id":"eCZr8wpOgCW4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_prob = model.predict(X_test)                 # we put this in a proabablity\n","y_prob"],"metadata":{"id":"54epOR91geWe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Now we will check for each posiiton in array which number has the most probablity    "],"metadata":{"id":"nTtxaP7Bgr5l"}},{"cell_type":"code","source":["y_prob.argmax(axis=1)            #this is check for each image's probablity of being any number between 0 to 9"],"metadata":{"id":"CYbfgJZ3g-Qz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Prediction TIME"],"metadata":{"id":"5ODk9p3Khg57"}},{"cell_type":"code","source":["y_pred  = y_prob.argmax(axis=1)"],"metadata":{"id":"avza65ydhd5b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#  Accuracy TIME"],"metadata":{"id":"UPa1uZrmhsOC"}},{"cell_type":"code","source":["\n","from sklearn.metrics import accuracy_score\n","accuracy_score(y_test,y_pred)"],"metadata":{"id":"i60iito6hzXM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## WE ARE GETTING AN ACCURACY OF 98 ( Still less than my last sem CGPA)"],"metadata":{"id":"QPnuT-nklD3g"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We getting an accuracy of 97.8 perc using ANN\n","But the same thing we gonna try to do with DECISION TREES\n","It would be around 95 perc\n","So we can see how ANN works soo good with these multivariate image Classification kinds problems\n"],"metadata":{"id":"Ery5f0cSiHt0"}},{"cell_type":"markdown","source":["\n","WE can increase the accuracy\n","*   Increasing the no of epochs\n","*   Changing the activation function\n","*   Increasing the no of nodes\n","*   Increasing the no of layers                     #but too many nodes and layers maylead to overfitting"],"metadata":{"id":"iQjZRlFgjFD5"}},{"cell_type":"markdown","source":["# PLOTTING GRAPHS NOW"],"metadata":{"id":"D_4auXEZlOJf"}},{"cell_type":"code","source":["plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['train', 'val'], loc='upper right')\n","plt"],"metadata":{"id":"J8rxHAdcu6qV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epochs')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt"],"metadata":{"id":"ENdFhpapxm2f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# MANUAL TESTING\n","put the number in the X_test, then put the same number next line to check it yourself"],"metadata":{"id":"9k0s9kUd9-3V"}},{"cell_type":"markdown","source":["EXAMPLE"],"metadata":{"id":"zgalDwPE3mD8"}},{"cell_type":"code","source":["plt.imshow(X_test[56])             #Here it gives 4 in the pixelated image in the 56th"],"metadata":{"id":"bcq0Sdp53GvT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.predict(X_test[56].reshape(1,28,28)).argmax(axis=1)         #56th image reshaping into 1 image from pixels"],"metadata":{"id":"cKz1dC5s8a4C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#it gives 4 so the prediction is same as it was in the test"],"metadata":{"id":"3SvqHYqr-k9m"},"execution_count":null,"outputs":[]}]}